[%
operation assignFieldFromBuilder(field : Field) : String {
	var value = field.nullable ? ("builder."+field.name) else ("Objects.requireNonNull(builder."+field.name+")");
	return field.name+" = "+value+";";
}

operation authMethodClasses(authMethods : Collection) : String {
	var suffix = "AuthMethod.class";
	var authClasses = "";
	var amIter = authMethods.iterator();
	while (amIter.hasNext()) {
		authClasses += amIter.next().literal + suffix;
		if (amIter.hasNext()) {
			authClasses += ", ";
		}
	}
	return authClasses;
}

operation Field typeName() : String {
	return self?.type?.getTypeName() ?: "Void";
}

operation Field typeAndName() : String {
	return self.typeName()+" "+self.name;
}

operation Field queryParamValue() : String {
	return self.typeName() == "String" ? self.name : self.name + ".toString()";
}

operation Field getDescriptionDoc() : String {
	return self.doc.isDefined() ? self.doc.description : "";
}

operation Field getReturnDoc() : String {
	return self.doc.isDefined() ? self.doc.returnDesc : "";
}

operation Endpoint className() : String {
	return self.name + "Endpoint";
}

operation Endpoint variableName() : String {
	return self.name.ftlc().replace("Endpoint", "");
}

operation Endpoint isVoidRequestType() : Boolean {
	return self.requestType.isUndefined() or self.requestType.isVoid();
}

operation Endpoint isVoidReturnType() : Boolean {
	return self.responseType.isUndefined() or self.responseType.isVoid();
}

operation Endpoint returnTypePretty() : String {
	return self.isVoidReturnType() ? "void" : self.responseTypeName();
}

operation Endpoint requestTypePretty() : String {
	return self.requestTypeName();
}

operation Endpoint requestTypeParamDeclaration() : String {
	return self.isVoidRequestType() ? "" : self.requestTypeName() + " request";
}

operation Endpoint hasRequestType() : Boolean {
	return self.requestType.isDefined() and not self.requestType.isVoid();
}

operation Endpoint requestTypePretty() : String {
	return self.hasRequestType() ? self.requestTypeName()+" request" else "";
}

operation Endpoint requestParameterUsage() : String {
	return self.hasRequestType() ? "request" : "null";
}

operation Endpoint requestTypeName() : String {
	return self.requestType?.getTypeName() ?: "Void";
}

operation Endpoint responseTypeName() : String {
	return self.responseType?.getTypeName() ?: "Void";
}

operation Endpoint typeParams() : String {
	return self.requestTypeName() + ", " + self.responseTypeName();
}

operation AbstractType isVoid() : Boolean {
	return self.isKindOf(Void) or (self.name.isDefined() and isVoidType(self.name));
}

operation isVoidType(typeName : String) : Boolean {
	return typeName.isUndefined() or typeName.equalsIgnoreCase("Void");
}

operation AbstractType isCustomType() : Boolean {
	return self.isKindOf(Class);
}

operation AbstractType isQueryParams() : Boolean {
	return self.isCustomType() and self.isQueryParams;
}

operation AbstractType hasFields() : Boolean {
	return self.isCustomType() and self.fields.isDefined() and not self.fields.isEmpty();
}

operation AbstractType getTypeName() : String {
	return self.isKindOf(Type) ? (self.name ?: "Void") : self.type().name;
}

operation String isRequestWrapper() : Boolean {
	return self.endsWith("RequestWrapper");
}

operation endpointRequestParameter(requestTypeName : String) : String {
	return requestTypeName + " " + (requestTypeName.isRequestWrapper() ? "wrapper" : "request");
}

operation Class isJsonable() {
	return self.isResponse or self.extends?.getTypeName() == "JsonableBaseObject" or self.implements?.includes("Jsonable");
}

@template
operation simpleConstructor(visibility : String, name : String, fields : Collection(Field)) {
	out.print("\t");
	if (visibility.isDefined() and not visibility.isEmpty()) {
		out.print(visibility + " ");
	}
	out.print(name+"(");
	var fieldsIter = fields.iterator();
	while (fieldsIter.hasNext()) {
		var field = fieldsIter.next();
		out.print(field.typeAndName());
		if (fieldsIter.hasNext()) {
			out.print(", ");
		}
	}
	out.println(") {");
	for (field in fields) {%]
		this.[%=field.name%] = [%=field.name%];
[%	}%]
	}
[%
}

@template
operation Class declaration() {
	if (self.doc.isDefined()) {%]
/**
 * [%=self.doc.description%]
 */
[%}
	if (self.isJsonable()) {%]
@JsonInclude(value = JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
[%	} %]
[%=(self.public ? "public " : "")%]class [%=self.name%][%
	if (self.extends.isDefined()) {
%] extends [%=self.extends.getTypeName()%][%	
	}
	if (self.implements.isDefined() and not self.implements.isEmpty()) {
%] implements[%
		for (intf in self.implements) {
			out.print(" "+intf);
			if (loopCount < self.implements.size()) {
				out.print(",");
			}
		}
	}
%] {[%
}

@template
operation Field fieldJavadoc() {
	if (self.doc.isDefined()) {%]
/**
[%
		if (self.doc.description.isDefined()) {
			out.println(" * "+self.doc.description);
		}
		if (self.doc.parameters.isDefined() and not self.doc.parameters.isEmpty()) {%]
 * 
[%			for (param in self.doc.parameters) {%]
 * @param [%=param.name%] [%=param.description%]
[%
			}
		}
		if (self.doc.exceptions.isDefined() and not self.doc.exceptions.isEmpty()) {%]
 * 
[%			for (exception in self.doc.exceptions) {%]
 * @throws [%=exception.name%] [%=exception.description%]
[%			}
		}
		if (self.doc.returnDesc.isDefined()) {%]
 * 
 * @return [%=self.doc.returnDesc%]
[%
		}%]
 */
[%	}
}

@template
operation fieldGetter(field : Field) {%]
public [%=field.typeName()%] get[%=field.name.ftuc()%]() {
	return [%=field.name%];
}
[%}

@template
operation fieldGettersWithoutJson(fields : Collection(Field)) {
for (field in fields) {%]
	[%=field.fieldJavadoc()%]
	[%=fieldGetter(field)%]

[%}
}

@template
operation fieldGetters(fields : Collection(Field)) {
for (field in fields) {%]
	[%=field.fieldJavadoc()%]
[%	if (field.json.isDefined()) {%]
	@JsonProperty("[%=field.json%]")
[%}%]
	[%=fieldGetter(field)%]

[%}
}

@template
operation fromJson(name : String) {%]
	/**
	 * Creates an instance of this class from a JSON payload.
	 *
	 * @param json The JSON string to parse.
	 * @return An instance of this class with the fields populated, if present.
	 */
	public static [%=name%] fromJson(String json) {
		return Jsonable.fromJson(json);
	}
[%}

@template
operation builder(fields : Collection(Field)) {%]

	/**
	 * Entry point for constructing an instance of this class.
	 * 
	 * @return A new Builder.
	 */
	public static Builder builder() {
		return new Builder();
	}
	
	public static class Builder {
	[% for (field in fields) {%]
		private [%=field.typeAndName()%];
	[%}%]
	
		Builder() {}
	
	[% for (field in fields) {%]
		/**
		 * [%=field.getDescriptionDoc()%]
		 *
		 * @param [%=field.name%] [%=field.getReturnDoc()%]
		 *
		 * @return This builder.
		 */
		public Builder [%=field.name%]([%=field.typeAndName()%]) {
			this.[%=field.name%] = [%=field.name%];
			return this;
		}

[%}%]
	
		/**
		 * Builds the {@linkplain [%=name%]}.
		 *
		 * @return An instance of [%=name%], populated with all fields from this builder.
		 */
		public [%=name%] build() {
			return new [%=name%](this);
		}
	}
[%}

@template
operation packageAndCopyright() {%]
/*
 *   Copyright [%=Native("java.time.ZonedDateTime").now().getYear()%] Vonage
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package [%=package%];

[%}
%]