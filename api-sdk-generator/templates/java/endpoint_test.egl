[%
import "./helper_functions.egl";
%]
[%=packageAndCopyright()%]

import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.entity.ContentType;
import com.vonage.client.TestUtils;
import com.vonage.client.HttpWrapper;
import com.vonage.client.VonageResponseParseException;
import com.vonage.client.auth.*;
import org.junit.Before;
import org.junit.Test;
import java.util.Map;
import static org.junit.Assert.*;

public class [%=name + testClassSuffix%] {
	[%=name%] endpoint;
	
	
	@Before
	public void setUp() {
		endpoint = new [%=name%](new HttpWrapper());
	}
	
	@Test
	public void testAuthMethod() {
		Class<?>[] authMethods = endpoint.getAcceptableAuthMethods();
		assertEquals(1, authMethods.length);
		assertEquals([%=authMethodClasses(authMethods)%], authMethods[0]);
	}
	
	@Test
	public void testDefaultUri() throws Exception {
		[%=requestTypeName%] request = [%
		if (requestType.isUndefined() or requestType.fields.isUndefined() or requestType.fields.isEmpty()) {
			out.print("null;");
		}
		else if (requestType.name.isRequestWrapper()) {
			out.print("new "+requestType.name+"();");
		}
		else {
			out.println(requestType.name + ".builder()");
			for (field in requestType.fields) {
%]			.[%=field.name%]([%=field.testValue%])
[%			}
%]			.build();
[%
		} %]

		RequestBuilder builder = endpoint.makeRequest(request);
		assertEquals("[%=requestMethod.toUpperCase()%]", builder.getMethod());
		String expectedUri = "[%=fullEndpointPath%]";
		assertEquals(expectedUri, builder.build().getURI().toString());
[%	if (requestType.isDefined() and requestType.fields.isDefined()) {%]
		assertEquals(ContentType.APPLICATION_JSON.getMimeType(), builder.getFirstHeader("Content-Type").getValue());
		String expectedRequest = "{}";
		assertEquals(expectedRequest, EntityUtils.toString(builder.getEntity()));
[%}	if (responseType.isDefined() and responseType.fields.isDefined()) {%]
		assertEquals(ContentType.APPLICATION_JSON.getMimeType(), builder.getFirstHeader("Accept").getValue());
[%} %]
		Map<String, String> params = TestUtils.makeParameterMap(builder.getParameters());
[%	if (requestType.isDefined() and requestType.fields.isDefined()) {%]
		assertEquals([%=requestType.fields.size()%], params.size());
[%	for (field in requestType.fields) {
		if (field.stringValue.isDefined()) {%]
		assertEquals([%=field.stringValue%], params.get("[%=field.json%]"));
[%		}	
	}
} if (responseType.isUndefined() or responseType.isVoid()) {%]
		assertNull(endpoint.parseResponse(mockResponse));
[% } %]
	}

	@Test
	public void testCustomUri() throws Exception {
		String baseUri = "http://example.com";
		HttpWrapper wrapper = new HttpWrapper(HttpConfig.builder().baseUri(baseUri).build());
		endpoint = new [%=name%](wrapper);
		[%=requestTypeName%] request = null;
		String expectedUri = baseUri + "[%=relativeEndpointPath%]";
		RequestBuilder builder = endpoint.makeRequest(request);
		assertEquals(expectedUri, builder.build().getURI().toString());
[%	if (requestType.isDefined() and requestType.fields.isDefined()) {%]
		assertEquals(ContentType.APPLICATION_JSON.getMimeType(), builder.getFirstHeader("Content-Type").getValue());
		String expectedRequest = "{}";
		assertEquals(expectedRequest, EntityUtils.toString(builder.getEntity()));
[%}	if (responseType.isUndefined() or responseType.isVoid()) {%]
		assertEquals(ContentType.APPLICATION_JSON.getMimeType(), builder.getFirstHeader("Accept").getValue());
[% } %]
		assertEquals("[%=requestMethod.toUpperCase()%]", builder.getMethod());
	}

[% if (isHalResponse) {%]
	@Test
	public void testEmptyResponse() throws Exception {
		HttpResponse mockResponse = TestUtils.makeJsonHttpResponse(200, "{}");
		[%=responseTypeName%] parsed = endpoint.parseResponse(mockResponse);
		assertNotNull(parsed);
		assertNull(parsed.get[%=halResponseEmbeddedType.name.ftuc()%]());
		assertNull(parsed.getLinks());
		assertNull(parsed.getPage());
		assertNull(parsed.getPageSize());
		assertNull(parsed.getTotalItems());
		assertNull(parsed.getTotalPages());
	}
	
	@Test
	public void testFullResponse() throws Exception {
		String expectedResponse = "{\n" +
				"   \"page_size\": 50,\n" +
				"   \"page\": 7,\n" +
				"   \"total_pages\": 9,\n" +
				"   \"total_items\": 42,\n" +
				"   \"_links\": {\n" +
				"      \"first\": {\n" +
				"         \"href\": \"[%=fullEndpointPath%]?page=5&Page_size=10\"\n" +
				"      },\n" +
				"      \"self\": {\n" +
				"         \"href\": \"[%=fullEndpointPath%]?page=5&Page_size=10\"\n" +
				"      },\n" +
				"      \"prev\": {\n" +
				"         \"href\": \"[%=fullEndpointPath%]?page=5&page_size=10\"\n" +
				"      },\n" +
				"      \"next\": {\n" +
				"         \"href\": \"[%=fullEndpointPath%]?page=5&page_size=10\"\n" +
				"      }\n" +
				"   },\n" +
				"   \"_embedded\": {\n" +
				"      \"[%=halResponseEmbeddedType.name%]\": [\n" +
				"         {},{},{}\n" +
				"      ]\n" +
				"   }\n" +
				"}";
		HttpResponse mockResponse = TestUtils.makeJsonHttpResponse(200, expectedResponse);
		[%=responseTypeName%] parsed = endpoint.parseResponse(mockResponse);
		assertNotNull(parsed);
		HalLinks links = parsed.getLinks();
		assertNotNull(links);
		assertNotNull(links.getSelfUrl());
		assertNotNull(links.getFirstUrl());
		assertNotNull(links.getNextUrl());
		assertNotNull(links.getPrevUrl());
		assertEquals(7, parsed.getPage().intValue());
		assertEquals(50, parsed.getPageSize().intValue());
		assertEquals(9, parsed.getTotalPages().intValue());
		assertEquals(42, parsed.getTotalItems().intValue());
		[%=halResponseEmbeddedType.type.name%] [%=halResponseEmbeddedType.name%] = parsed.get[%=halResponseEmbeddedType.name.ftuc()%]();
		assertNotNull([%=halResponseEmbeddedType.name%]);
		assertEquals(3, [%=halResponseEmbeddedType.name%].size());
		[%=halResponseEmbeddedType.name%].forEach(Assert::assertNotNull);
	}
	
	@Test(expected = VonageUnexpectedException.class)
	public void testInvalidResponse() {
		[%=responseType.name%].fromJson("{malformed]");
	}
[% } else if (responseType.isDefined() and responseType.fields.isDefined()) {%]
	@Test
	public void testFullResponse() throws Exception {
		String expectedResponse = "{}";
		HttpResponse mockResponse = TestUtils.makeJsonHttpResponse(200, expectedResponse);
		[%=responseTypeName%] parsed = endpoint.parseResponse(mockResponse);
		assertNotNull(parsed);
	}
	
	@Test
	public void testEmptyResponse() throws Exception {
		HttpResponse mockResponse = TestUtils.makeJsonHttpResponse(200, "{}");
		[%=responseTypeName%] parsed = endpoint.parseResponse(mockResponse);
		assertNotNull(parsed);
[% for (field in responseType.fields) {%]
		assertNull(parsed.get[%=field.name.ftuc()%]());
[%	} %]
	}
	
	@Test(expected = VonageResponseParseException.class)
	public void testInvalidResponse() {
		[%=responseType.name%].fromJson("{malformed]");
	}
[% } %]

	@Test(expected = [%=exception%].class)
	public void test400Response() throws Exception {
		endpoint.parseResponse(TestUtils.makeJsonHttpResponse(400, "{}"));
	}
	
	@Test(expected = [%=exception%].class)
	public void test500Response() throws Exception {
		endpoint.parseResponse(TestUtils.makeJsonHttpResponse(500, "{}"));
	}
}