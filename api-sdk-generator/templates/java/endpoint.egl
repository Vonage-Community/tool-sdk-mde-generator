[%
import "./helper_functions.egl";
%]
[%=packageAndCopyright()%]

import com.vonage.client.AbstractMethod;
import com.vonage.client.HttpWrapper;
[% for (am in authMethods) {%]
import com.vonage.client.auth.[%=am.literal%]AuthMethod;
[%}%]
import org.apache.http.HttpResponse;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.client.methods.RequestBuilder;
import java.io.IOException;

class [%=name%] extends AbstractMethod<[%=requestTypeName%], [%=responseTypeName%]> {
	private static final Class<?>[] ALLOWED_AUTH_METHODS = {[%=authMethodClasses(authMethods)%]};
	private static final String PATH = "[%=path%]";

	[%=name%](HttpWrapper httpWrapper) {
		super(httpWrapper);
	}

	@Override
	protected Class<?>[] getAcceptableAuthMethods() {
		return ALLOWED_AUTH_METHODS;
	}

	@Override
	public RequestBuilder makeRequest([%=endpointRequestParameter(requestTypeName)%]) {
		String path = String.format(PATH, getApplicationIdOrApiKey());
		String uri = httpWrapper.getHttpConfig().[%=baseUriMethod%]() + path;
[% if (requestType.isDefined() and requestType.isQueryParams.isDefined() and requestType.isQueryParams) {%]
		return request.applyParams(RequestBuilder.[%=requestMethod.toLowerCase()%](uri)[%
	if (not isVoidType(responseTypeName)) {%]

				.setHeader("Accept", "application/json")[%
	}
} else {%]
		return RequestBuilder.[%=requestMethod.toLowerCase()%](uri)[%
	if (requestType.isDefined() and requestType.isCustomType()) {%]

				.setHeader("Content-Type", "application/json")[%
	} if (not isVoidType(responseTypeName)) {%]

				.setHeader("Accept", "application/json")[%
	} if (not requestTypeName.isRequestWrapper() and requestType.isDefined() and requestType.isCustomType()) {%]

				.setEntity(new StringEntity(request.toJson(), ContentType.APPLICATION_JSON))[%
	}
} %];
	}

	@Override
	public [%=responseTypeName%] parseResponse(HttpResponse response) throws IOException {
		int statusCode = response.getStatusLine().getStatusCode();
		if (statusCode >= 200 && statusCode < 300) {
			return [%
			if (not isVoidType(responseTypeName)) {
			%][%=responseTypeName%].fromJson(basicResponseHandler.handleResponse(response))[%
			} else {%]null[%}%];
		}
		else {
			throw [%=exception%].fromHttpResponse(response);
		}
	}
}
