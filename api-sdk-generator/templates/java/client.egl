[%
import "./helper_functions.egl";
%]
[%=packageAndCopyright()%]

import com.vonage.client.HttpWrapper;
import com.vonage.client.VonageClient;
import java.util.List;

/**
 * A client for talking to the Vonage [%=name%] API. The standard way to obtain an instance of this class is to use
 * {@link VonageClient#get[%=name%]()}.
 */
public class [%=name%] {
[% for (endpoint in endpoints) {%]
	final RestEndpoint<[%=endpoint.typeParams()%]> [%=endpoint.variableName()%];
[%}%]

	/**
	 * Constructor.
	 *
	 * @param wrapper (REQUIRED) shared HTTP wrapper object used for making REST calls.
	 */
	@SuppressWarnings("unchecked")
	public [%=name%](HttpWrapper wrapper) {
	
		class Endpoint<T, R> extends DynamicEndpoint<T, R> {
			Endpoint(Function<T, String> pathGetter, HttpMethod method, R... type) {
				super(DynamicEndpoint.<T, R> builder(type)
					.authMethod([%=authMethodClasses(endpoints.first.authMethods)%])
					.responseExceptionType([%=exception%].class)
					.requestMethod(method).wrapper(wrapper).pathGetter((de, req) -> {
						String base = de.getHttpWrapper().getHttpConfig().get[%=endpoints.first.baseUriName%]BaseUri();
						return base + pathGetter.apply(req);
					})
				);
			}
		}
		
[% for (endpoint in endpoints) {%]
		[%=endpoint.variableName()%] = new Endpoint<>(req -> "[%=endpoint.path%]", HttpMethod.[%=endpoint.requestMethod%]);
[%}%]
	}

[% for (endpoint in endpoints) {%]
	public [%=endpoint.returnTypePretty()%] [%=endpoint.variableName()%]([%=endpoint.requestTypePretty()%]) {
		[%=endpoint.isVoidReturnType() ? "" : "return "%][%=endpoint.variableName()%].execute([%=endpoint.requestParameterUsage()%]);
	}

[%}%]
}
