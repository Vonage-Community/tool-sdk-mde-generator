[%
import "./helper_functions.egl";
%]
[%=packageAndCopyright()%]

import com.vonage.client.*;
import com.vonage.client.auth.*;
import com.vonage.client.common.HttpMethod;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.function.Executable;
import java.util.*;

public class [%=clientClass + testClassSuffix%] extends ClientTest<[%=clientClass%]> {
	
	public [%=clientClass + testClassSuffix%]() {
		client = new [%=name%](wrapper);
	}
	
	void assert401ResponseException(Executable invocation) throws Exception {
		assert401ApiResponseException([%=exception%].class, invocation);
	}

[% for (endpoint in endpoints) {%]	
	@Test
	public void test[%=endpoint.name.ftuc()%]() throws Exception {
		[%=endpoint.requestTypeName()%] request = null;
		String responseJson = "{}";
		stubResponseAndRun(responseJson, () -> client.[%=endpoint.name.ftlc()%](request));
		stubResponseAndAssertThrows(200, () -> client.[%=endpoint.name.ftlc()%](null), NullPointerException.class);
		stubResponseAndAssertThrows(401, () -> client.[%=endpoint.name.ftlc()%](request), [%=exception%].class);
		assert401ResponseException(() -> client.[%=endpoint.name.ftlc()%](request));
	}
	
	@Test
	public void test[%=endpoint.name.ftuc()%]Endpoint() throws Exception {
		new [%=testSpec%]<[%=endpoint.typeParams()%]>() {

			@Override
			protected RestEndpoint<[%=endpoint.typeParams()%]> endpoint() {
				return client.[%=endpoint.name.ftlc()%];
			}

			@Override
			protected HttpMethod expectedHttpMethod() {
				return HttpMethod.[%=endpoint.requestMethod%];
			}

			@Override
			protected String expectedEndpointUri([%=endpoint.requestTypePretty()%] request) {
				return "[%=endpoint.path%]";
			}

			@Override
			protected [%=endpoint.requestTypePretty()%] sampleRequest() {
			[% if (endpoint.isVoidRequestType() or not endpoint.requestType.hasFields()) {%]
				return null;
			[% } else {%]
				return [%=endpoint.requestType.name%].builder()
				[% for (field in endpoint.requestType.fields) {%]
						.[%=field.name%]([%=field.testValue%])
				[%}%]
						.build();
			[%}%]
			}

[% if (not endpoint.isVoidRequestType() and endpoint.requestType.isQueryParams()) {%]
			@Override
			protected Map<String, String> sampleQueryParams() {
				return Map.of(
		[% for (field in endpoint.requestType.fields) {%]
					"[%=field.json%]", "[%=field.stringValue%]",
[%}%]
				);
			}
[%} else if (not endpoint.isVoidRequestType() and endpoint.requestType.isCustomType()) {%]
			@Override
			protected String sampleRequestBodyString() {
				return "{}";
			}
[%}%]
		}
		.runTests();
	}

[%}%]
}